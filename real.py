import os
import time
import numpy as np
import pandas as pd
import tensorflow as tf
from scapy.all import sniff, IP
from tensorflow import keras
from tensorflow.keras.metrics import MeanSquaredError  # –î–ª—è –º–µ—Ç—Ä–∏–∫–∏ MSE
from sklearn.preprocessing import MinMaxScaler, OrdinalEncoder
from datetime import datetime


INTERFACE = "eth0"
LOG_FILE = "anomalies_log.csv"
MODEL_PATH = "autoencoder_model.h5"
ENCODER_PATH = "anomaly_threshold.npy"
SCALER_PATH = "scaler.pkl"
ANOMALY_THRESHOLD = None


print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")


autoencoder = keras.models.load_model(MODEL_PATH, custom_objects={'MeanSquaredError': MeanSquaredError})
ip_encoder = np.load(ENCODER_PATH, allow_pickle=True).item()
scaler = pd.read_pickle(SCALER_PATH)


def preprocess_packet(packet):
    """ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–∞–∫–µ—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ """
    if IP in packet:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
        src_ip = packet[IP].src
        dst_ip = packet[IP].dst
        protocol = packet[IP].proto
        ttl = packet[IP].ttl
        length = len(packet)


        src_ip_encoded = ip_encoder.transform([[src_ip]])[0][0] if src_ip in ip_encoder.categories_[0] else -1
        dst_ip_encoded = ip_encoder.transform([[dst_ip]])[0][0] if dst_ip in ip_encoder.categories_[0] else -1


        scaled_features = scaler.transform([[ttl, length]])[0]
        ttl_scaled, length_scaled = scaled_features

        return np.array([[src_ip_encoded, dst_ip_encoded, protocol, ttl_scaled, length_scaled]]), timestamp, src_ip, dst_ip, protocol, ttl, length
    return None


def reconstruction_error(model, X):
    X_pred = model.predict(X)
    errors = np.mean(np.power(X - X_pred, 2), axis=1)
    return errors


def packet_handler(packet):
    global ANOMALY_THRESHOLD

    data = preprocess_packet(packet)
    if data is None:
        return

    X_input, timestamp, src_ip, dst_ip, protocol, ttl, length = data
    error = reconstruction_error(autoencoder, X_input)[0]

    if error > ANOMALY_THRESHOLD:
        print(f"üö® –ê–Ω–æ–º–∞–ª–∏—è! –û—à–∏–±–∫–∞: {error:.5f}, –ü–æ—Ä–æ–≥: {ANOMALY_THRESHOLD:.5f}")
        print(f"‚è≥ {timestamp} | {src_ip} ‚Üí {dst_ip} | –ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol} | TTL: {ttl} | –î–ª–∏–Ω–∞: {length}")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–Ω–æ–º–∞–ª–∏—é –≤ —Ñ–∞–π–ª
        with open(LOG_FILE, "a") as f:
            f.write(f"{timestamp},{src_ip},{dst_ip},{protocol},{ttl},{length},{error:.5f}\n")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ç–µ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")–∏
    if not os.path.exists(LOG_FILE):
        with open(LOG_FILE, "w") as f:
            f.write("timestamp,src_ip,dst_ip,protocol,ttl,length,error\n")
    try:
        ANOMALY_THRESHOLD = float(input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ –∞–Ω–æ–º–∞–ª–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): "))
    except ValueError:
        print("üîÑ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –∞–Ω–æ–º–∞–ª–∏–π...")
        normal_data = np.random.normal(loc=0.01, scale=0.005, size=1000)
        ANOMALY_THRESHOLD = np.mean(normal_data) + 2 * np.std(normal_data)
        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –∞–Ω–æ–º–∞–ª–∏–π: {ANOMALY_THRESHOLD:.5f}")

    sniff(prn=packet_handler, iface=INTERFACE, store=False)
